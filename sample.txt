Okay, so hi everyone and welcome to the third iteration of Daytona Office Hours. As always, this serves as kind of a review point for our last week and what we did and what we released last week and what we have upcoming this week, and to highlight a couple of our contributors that were active during this period and maybe comment on some discussions we had on the repository itself. So I'll share my screen and we can walk through, let me just enhance this a bit, okay. So I shared my screen and we can walk through the changes that happened in the last week and what was released. So the latest release, as you can see here, is version 0.20. A couple of features that we implemented was exposing the server CLI version by our colleague Luca. And this change essentially adds a header to the request on the client side and also adds a header to the response on the server side. This means that the CLI then is always aware of the version that the client is running and the server as well. And it will warn the user that we detected an out of sync of the versions between those two binaries. And then they suggested the user that they should sync the binaries just to be safe. The other important feature that was released was adding the Gitness provider. So this was contributed by our first time new contributor, Rutik. This was actually a bounty that he solved and now we support the Gitness as a Git provider, which brings us closer to implementing all the available Git providers, which is kind of the goal of Daytona to accommodate as many Git providers as possible to be as flexible as we can. And also we made significant improvements to logging when creating the creating workspaces in Daytona. And this was made by Ivan, our colleague. This change actually is probably the most significant of the release because it really improves the logging itself and makes the creation experience a bit, if not a lot more pleasant. And also we had one breaking change, which requires users to just update their providers that they have. This is because the interface of the logging that we use in the providers has changed because of this feature. And as you can see here, Rutik is one of our newest contributors. And we of course welcome him to the community and we hope to see him around the repo some more as well. And also you may be, you can notice that we also have a pre-release going on. This pre-release is of course coming in the next release will be, let's say, push the latest next release, which we aim to do on Friday. This pre-release, I can talk about it a bit here, but as always, I want to preface this by saying when you see pre-releases, this means that we're still testing changes internally and you can expect maybe some bugs along the way. But of course, we are, let's say, excited to share this and to push this live in two days time. So this particular pre-release tackles a bigger factor to how workspaces are created. So if you remember a couple of releases ago, we actually launched our builders, which enabled Eterna to build projects using development environment standards, such as dev containers. And we plan to expand upon that in the future to enable a lot more of these development environment standards. And this change actually, let's say, moves that build process that we currently have to the target machine where the workspace will be created. And this change was very important to enable two things. One is to run the process on the host where the actual projects will be created. This means that you'll get all the benefits of, for example, caching containers. For example, when you run multiple of the same projects using the same repository, now they will be cached automatically and then you'll see a large improvement in performance when running them. And also with this change, it's a lot easier to support, for example, composed projects with dev containers, for example, GPU support as well, because that all works out of the box because the entire process is run on the host machine itself. So this is the major update that's coming in the next release, and we hope it will improve the user experience and allow users to actually leverage all the features of dev containers and then subsequently the other standards we plan on implementing. I know Nico is clapping in the chat because he was eager to see GPU support and now he can test out Daytona and work with it to its full extent. Okay, so the other changes we have planned for the next release are, as you can see, adding Azure DevOps as the guest provider. Again, one step closer to supporting most or all Git providers available. Then we have allowing the user to override workspace image at creation. This will be a welcome change to users that are more accustomed to, let's say, scripting in the shell and not using the terminal UI. This allows users to pass custom images as flags or override builders as flags in the creation process. A couple of fixes to the logging improvements we made last week. We noticed a couple of bugs and now we're here to address them, and then we should have a complete, let's say, logging refactor with this change as well. And also one interesting change was that when developing the Gitness provider, one of our contributors noticed that we had an error when trying to clone providers, clone repos, sorry, via HTTP, and this minor fix addresses that as well. So we should now support self-hosted Git providers that are not hosted via HTTPS as well. And also just a dependabot fix, nothing really important here. As you'll notice, we have a breaking change again, which will, again, requires a provider update because most of the changes implemented in this PR are actually related to providers which consume one of our packages in Daytona. Also, as you'll see, we have a couple of notes here that allow you to test this release. If you want, you can download this release and then, let's say, configure a pre-release channel for our providers for you to test out the changes and then see the benefits and performance improvements I talked about here. And as you can see, we have a new contributor coming up. This is RS Lab Hub, which made the first contribution regarding the HTTP or HTTPS cloning of the repository. And also, if we take a look at a couple of open PRs, we can see that we have a Gitness var naming. This is just a style issue regarding the repository, nothing really important. And another feature we are hoping to push to the next release on Friday is self-hosted support for Bitbucket or actually supporting the Bitbucket server, which, again, is a new Git provider we're supporting and is pushing us closer to that 100% completion. Regarding some of the open issues or the issues we opened in the, let's say, in the past couple of days, we're planning on adding VS Code extension support for dev container projects. As some of you know, dev containers allow you to configure extensions inside the standard itself. And currently, they are unfortunately ignored when VS Code is starting up. We need to now enable support for that as well. Also, I made actually a new backlog issue for just some UX improvements. And regarding some of the other issues, I don't think anything major here is of relevance, let's say. And as you can see here, this workspace create flow refactor is the actual, the issue I was solving for building workspaces on the target machine. I think that's it from the, let's say, from what we had last week and what we are pushing for next week. I can maybe end with a demo of the features we are trying to push for next week. If you see here, I am on, I should be on, yeah, I'm on the alpha release or the pre-release. And we can see that when I serve and create. So if I go to the eternal create, I can actually create it from a composed project. Okay. The server is not booted up currently. Let's wait for it for a sec. Maybe I have it started here. No, I don't. Okay. Yeah. All good. So I have the server booted and now I can do the eternal create and create a project. And this project has actually a dev container project with a composed configuration as well. And as you can see here, we are, this actually looks like a similar output from before we are just building the dev container. But this change also, as you can see here, automatically builds and starts the composed project as well. It allows them to download the Daytona binary inside, and then it will start our Daytona agent inside and it will allow us to enter the project. And while this builds, I can show in parallel what's going on. So if I do Docker PS, you'll see here, there's a lot of containers, but you can see here, we have this dev container, which is from our project and the Postgres as well. And I can do now Daytona SSH to go into it and we should be good to go. Let's just wait for a sec for the SSH connection to initialize. Yep. I'm good. And we see that I have access to the entire repository. If I have access to the entire repository, maybe my connection is dying out on me. Yeah, it seems so. Okay. I have access to the entire repository. And as you can see here, this is the magic of an alpha pre-release. Bugs are expected. We will, of course, solve all of this in preparation for the release on Friday. So if no one has any questions about what we discussed here today and what we have coming up, I say we wrap this up and see you on the next office hours, where I hope we'll talk about the large improvements we made to the entire creation process. So thanks for being here and see you in the next iteration.